# docker image that is used for all ci jobs; see https://hub.docker.com/ for a list of valid docker images
# Image with the centos 7 compilers
# image: iffregistry.fz-juelich.de/docker-images/centos7-intel-compilers/extended
# image: iffregistry.fz-juelich.de/docker-images/centos8-intel-compilers:latest
image: iffregistry.fz-juelich.de/docker-images/centos8-intel-compilers:latest-ipython3
# list with commands that are executed before each job; every job starts with a fresh docker container
before_script:
  - echo before scripts
  - set +e && source compilervars.sh intel64 && set -e
  - which ifort
  - ifort --version
  - which mpiifort
  - mpiifort -v
  - python --version
  # - pip3 install --user numpy

# pipeline stages; a stage is only run if the previous stage is completed. Each stage contains user-defined jobs
# that are run in parallel
stages:
  - build
  - test_results
  # - test_runtime
#   # - deploy:doc
#
# a build job (see `stage` key); jobs can have arbitrary names
build:intel:debug:
  stage: build
  script:
    - cd build
    - cmake ../ -DPLATFORM=iff -DDEBUG=ON
    - make 2> >(tee make.warnings)
    - test ! -s make.warnings
  artifacts:
    paths:
      - make.warnings
      - bin/
    expire_in: 1 day
  allow_failure: true

build:gnu:normal:
  stage: build
  script:
    - cd build
    - cmake ../ -DPLATFORM=iff -DCOMPILER=gnu
    - make
  artifacts:
    paths:
      - bin/
    expire_in: 1 day

build:gnu:debug:
  stage: build
  script:
    - cd build
    - cmake ../ -DPLATFORM=iff -DCOMPILER=gnu -DDEBUG=ON
    - make 2> >(tee make.warnings)
    - test ! -s make.warnings
  artifacts:
    paths:
      - make.warnings
      - bin/
    expire_in: 1 day
  allow_failure: true

build:intel:normal:
  stage: build
  script:
    - cd build
    - cmake ../ -DPLATFORM=iff
    - make
  artifacts:
    paths:
      - bin/
    expire_in: 1 day


# after build job(s) are completed, tests can be run; artifacts from all previous stages are transferred automatically
test:monolayer:
  image: iffregistry.fz-juelich.de/docker-images/centos7-intel-compilers/slurm-daemon:latest
  stage: test_results
  needs: ["build:intel:normal"]
  script:
    - cd examples/Nb_100_Monolayer
    - export OMP_NUM_THREADS=4
    - mpirun -np 2 ../../bin/titan_iff.exe
    - python3 ../../scripts/compare_output.py results_correct/FSOC/selfconsistency/initialrho_Fe_dfttype=S_parts=2_nkpt=1024_eta=1.0E-03_evlambda.dat results/FSOC/selfconsistency/initialrho_Fe_dfttype=S_parts=2_nkpt=1024_eta=1.0E-03_evlambda.dat
    - python3 ../../scripts/compare_output.py results_correct/TSOC/selfconsistency/selfconsistency_1Sites_dfttype=S_parts=2_nkpt=1024_eta=1.0E-03_evlambda.dat results/TSOC/selfconsistency/selfconsistency_1Sites_dfttype=S_parts=2_nkpt=1024_eta=1.0E-03_evlambda.dat

test:timeprop:
  image: iffregistry.fz-juelich.de/docker-images/centos7-intel-compilers/slurm-daemon:latest
  stage: test_results
  needs: ["build:intel:normal"]
  script:
    - cd examples/Ni_bulk_timeprop
    - export OMP_NUM_THREADS=4
    - mpirun -np 2 ../../bin/titan_iff.exe
    - python3 ../../scripts/compare_output.py results_correct/FSOC/selfconsistency/initialrho_Ni_dfttype\=S_parts\=2_nkpt\=10648_eta\=1.0E-03_ev.dat results/FSOC/selfconsistency/initialrho_Ni_dfttype\=S_parts\=2_nkpt\=10648_eta\=1.0E-03_ev.dat
    - python3 ../../scripts/compare_output.py results_correct/TSOC/selfconsistency/selfconsistency_1Sites_dfttype\=S_parts\=2_nkpt\=10648_eta\=1.0E-03_ev.dat results_correct/TSOC/selfconsistency/selfconsistency_1Sites_dfttype\=S_parts\=2_nkpt\=10648_eta\=1.0E-03_ev.dat
    - for i in `ls results_correct/TSOC/1Sites/time_propagation/` ; do echo "Comparing file ${i}" ; python3 ../../scripts/compare_output.py results_correct/TSOC/1Sites/time_propagation/${i} results/TSOC/1Sites/time_propagation/${i} ; done

# # `pages` is a special job that builds the gitlab page for this project; all artifacts must be saved in a `public`
# # directory to be published as a static site (that can be accessed from the whole www)
# pages:
#   stage: deploy:doc
#   script:
#     - apt install -y ffmpeg python-pip
#     # ubuntu ships with an old pip version -> upgrade before python packages are installed via pip
#     - pip install -U pip
#     # install sphinx (documentation generator) from PyPI to get the latest stable version
#     - pip install sphinx sphinx_rtd_theme
#     - make doc
#     - mv doc/_build/html/ public/
#   artifacts:
#     paths:
#       - public
#   # only publish a new site if commits are pushed to the master branch -> stable release
#   only:
#     - master
