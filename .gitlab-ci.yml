# docker image that is used for all ci jobs; see https://hub.docker.com/ for a list of valid docker images
# Image with the centos 7 compilers
# image: iffregistry.fz-juelich.de/docker-images/centos7-intel-compilers/extended
# image: iffregistry.fz-juelich.de/docker-images/centos8-intel-compilers:latest
# image: iffregistry.fz-juelich.de/docker-images/centos8-intel-compilers:latest-ipython3
image: iffregistry.fz-juelich.de/docker-images/centos8-intel-compilers:latest-nvidia_hpc
# list with commands that are executed before each job; every job starts with a fresh docker container
before_script:
  - echo before scripts
  - set +e && source compilervars.sh intel64 && set -e
  - which ifort
  - ifort --version
  - which mpiifort
  - mpiifort -v

# pipeline stages; a stage is only run if the previous stage is completed. Each stage contains user-defined jobs
# that are run in parallel
stages:
  - build
  - selfcon:normal
  - selfcon:supercond
  - results
  - plots
  # - test_runtime
  # - deploy:doc
#
# a build job (see `stage` key); jobs can have arbitrary names
#===================================== BUILDS =====================================
build:gnu:normal:
  stage: build
  script:
    - source /opt/rh/gcc-toolset-9/enable
    - which gfortran
    - gfortran --version
    - mpif90 -v
    - cd build
    - cmake ../ -DPLATFORM=iff -DCOMPILER=gnu
    - make
  artifacts:
    paths:
      - bin/
    expire_in: 1 day

build:gnu:debug:
  stage: build
  script:
    - source /opt/rh/gcc-toolset-9/enable
    - which gfortran
    - gfortran --version
    - mpif90 -v
    - cd build
    - cmake ../ -DPLATFORM=iff -DCOMPILER=gnu -DDEBUG=ON
    - make 2> >(tee make.warnings)
    - test ! -s make.warnings
  artifacts:
    paths:
      - make.warnings
      - bin/
    expire_in: 1 day
  allow_failure: true

build:intel:debug:
  stage: build
  script:
    - cd build
    - cmake ../ -DPLATFORM=iff -DDEBUG=ON
    - make 2> >(tee make.warnings)
    - test ! -s make.warnings
  artifacts:
    paths:
      - make.warnings
      - bin/
    expire_in: 1 day
  allow_failure: true

build:intel:normal:
  stage: build
  script:
    - cd build
    - cmake ../ -DPLATFORM=iff
    - make
  artifacts:
    paths:
      - bin/
    expire_in: 1 day

#===================================== TESTS =====================================
# after build job(s) are completed, tests can be run; artifacts from all previous stages are transferred automatically

# ** Anchors **
# Going to TEST_FOLDER, setting calculation type and running calculation
.run_test: &run_test
    # Printing Python version
    - python --version
    # Going to current test folder
    - cd ${TEST_FOLDER}
    # Setting up 
    - sed -i "s/-> itype = .*/-> itype = ${ITYPE}/g" input
    # Setting up 4 omp threads
    - export OMP_NUM_THREADS=8
    # Running the code with 2 MPI ranks
    - mpirun -np 1 ../../bin/titan_iff.exe
    # Printing any error file, if existing
    - if [ -f error* ] ; then grep -H '' error* ; fi
    # Printing runtime
    - grep "Finished on" output/*

# Create scResults from output file
.create_scResults_file: &create_scResults_file
    - sed -n '/Self-consistent ground state/,/\(.*iterations \)/p' output/* | head -n -1 | cut -c-77 > results/scResult

# Excluding files if they are not supposed to be checked and
# Comparing all remaining files in results folder with the ones in ./results_correct, using tolerance ${TOL}
.compare_files: &compare_files |
    if [ ! -z ${EXCLUDE} ]
    then
    find ./results -name *${EXCLUDE}* -exec rm -rf {} +
    fi
    for file in `find results/ -type f`
    do
      [[ -z ${TOL} ]] && echo "Comparing file $(basename ${file}) with default tolerance `grep -m 1 "tol =" ../../scripts/compare_output.py | awk -F= '{print $2}'`" || echo "Comparing file $(basename ${file}) with tolerance ${TOL}"
      python ../../scripts/compare_output.py ${file} ${file/results/results_correct} ${TOL}
    done

# ** Jobs **
#============ Normal Self-consistency ============#
Nb_100_Monolayer:
  image: iffregistry.fz-juelich.de/docker-images/centos7-intel-compilers/slurm-daemon:latest
  stage: selfcon:normal
  needs: ["build:intel:normal"]
  script:
    - export TEST_FOLDER="examples/Nb_100_Monolayer"
    - export ITYPE=1
    - *run_test
    - *create_scResults_file
    - *compare_files

Ni_bulk:
  image: iffregistry.fz-juelich.de/docker-images/centos7-intel-compilers/slurm-daemon:latest
  stage: selfcon:normal
  needs: ["build:intel:normal"]
  script:
    - export TEST_FOLDER="examples/Ni_bulk_timeprop"
    - export ITYPE=1
    - *run_test
    - *create_scResults_file
    - *compare_files

Fe_bulk:
  image: iffregistry.fz-juelich.de/docker-images/centos7-intel-compilers/slurm-daemon:latest
  stage: selfcon:normal
  needs: ["build:intel:normal"]
  script:
    - export TEST_FOLDER="examples/Fe_bulk_susc"
    - export ITYPE=1
    - *run_test
    - *create_scResults_file
    - *compare_files

graphene_pz:
  image: iffregistry.fz-juelich.de/docker-images/centos7-intel-compilers/slurm-daemon:latest
  stage: selfcon:normal
  needs: ["build:intel:normal"]
  script:
    - export TEST_FOLDER="examples/graphene"
    - export ITYPE=1
    - *run_test
    - *create_scResults_file
    - *compare_files

#============ Superconductor Self-consistency ============#
Nb_100_Superconducting_Monolayer:
  image: iffregistry.fz-juelich.de/docker-images/centos7-intel-compilers/slurm-daemon:latest
  stage: selfcon:supercond
  needs: ["build:intel:normal","Nb_100_Monolayer"]
  script:
    - export TEST_FOLDER="examples/Nb_100_Superconducting_Monolayer"
    - export ITYPE=1
    - *run_test
    - *create_scResults_file
    - *compare_files

#============ Other results ============#
Nb_100_Monolayer:ldos:
  image: iffregistry.fz-juelich.de/docker-images/centos7-intel-compilers/slurm-daemon:latest
  stage: results
  needs: ["build:intel:normal","Nb_100_Monolayer"]
  script:
    - export TEST_FOLDER="examples/Nb_100_Monolayer"
    - export ITYPE=2
    - *run_test
    - *compare_files

Nb_100_Monolayer:bands:
  image: iffregistry.fz-juelich.de/docker-images/centos7-intel-compilers/slurm-daemon:latest
  stage: results
  needs: ["build:intel:normal","Nb_100_Monolayer"]
  script:
    - export TEST_FOLDER="examples/Nb_100_Monolayer"
    - export ITYPE=4
    - *run_test
    - export EXCLUDE="weights"
    - *compare_files

graphene_pz:ldos:
  image: iffregistry.fz-juelich.de/docker-images/centos7-intel-compilers/slurm-daemon:latest
  stage: results
  needs: ["build:intel:normal","graphene_pz"]
  script:
    - export TEST_FOLDER="examples/graphene"
    - export ITYPE=2
    - *run_test
    - *compare_files

graphene_pz:bands:
  image: iffregistry.fz-juelich.de/docker-images/centos7-intel-compilers/slurm-daemon:latest
  stage: results
  needs: ["build:intel:normal","graphene_pz"]
  script:
    - export TEST_FOLDER="examples/graphene"
    - export ITYPE=4
    - *run_test
    - export EXCLUDE="weights"
    - *compare_files

graphene_pz:isoenergy:
  image: iffregistry.fz-juelich.de/docker-images/centos7-intel-compilers/slurm-daemon:latest
  stage: results
  needs: ["build:intel:normal","graphene_pz"]
  script:
    - export TEST_FOLDER="examples/graphene"
    - export ITYPE=5
    - *run_test
    - *compare_files

Fe_bulk:susc:
  image: iffregistry.fz-juelich.de/docker-images/centos7-intel-compilers/slurm-daemon:latest
  stage: results
  needs: ["build:intel:normal","Fe_bulk"]
  script:
    - export TEST_FOLDER="examples/Fe_bulk_susc"
    - export ITYPE=7
    - *run_test
    - export EXCLUDE="Slope"
    - export TOL=1e-5
    - *compare_files

Ni_bulk:timeprop:
  image: iffregistry.fz-juelich.de/docker-images/centos7-intel-compilers/slurm-daemon:latest
  stage: results
  needs: ["build:intel:normal","Ni_bulk"]
  script:
    - export TEST_FOLDER="examples/Ni_bulk_timeprop"
    - export ITYPE=11
    - *run_test
    - export EXCLUDE="checkpoint"
    - *compare_files

#============ Plots ============#
Nb_100_Monolayer:ldos:plot:
  image: iffregistry.fz-juelich.de/docker-images/centos8-intel-compilers:latest-ipython3
  stage: plots
  needs: ["Nb_100_Monolayer:ldos"]
  script:
    # Checking python version
    - python --version
    # install pip and numpy
    - pip install numpy || curl -O https://bootstrap.pypa.io/get-pip.py && python get-pip.py && pip install numpy
    # Setting examples folder
    - export TEST_FOLDER="examples/Nb_100_Monolayer"
    # Going to current test folder
    - cd ${TEST_FOLDER}
    # Creating new plot
    - python ../../scripts/plot_ldos.py results/TSOC/1Sites/LDOS/ldosu_site=1_norb=9_nkpt=1024_eta=1.0E-03_ev.dat results/TSOC/1Sites/LDOS/ldosd_site=1_norb=9_nkpt=1024_eta=1.0E-03_ev.dat --xlim="[-0.5,1.5]" --output="./results/ldos.png"
    # Comparing with existing (correct) plot
    - python ../../scripts/compare_images.py ./results/ldos.png ./results_correct/ldos.png

# # `pages` is a special job that builds the gitlab page for this project; all artifacts must be saved in a `public`
# # directory to be published as a static site (that can be accessed from the whole www)
# pages:
#   stage: deploy:doc
#   script:
#     - apt install -y ffmpeg python-pip
#     # ubuntu ships with an old pip version -> upgrade before python packages are installed via pip
#     - pip install -U pip
#     # install sphinx (documentation generator) from PyPI to get the latest stable version
#     - pip install sphinx sphinx_rtd_theme
#     - make doc
#     - mv doc/_build/html/ public/
#   artifacts:
#     paths:
#       - public
#   # only publish a new site if commits are pushed to the master branch -> stable release
#   only:
#     - master
