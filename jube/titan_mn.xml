<?xml version="1.0" encoding="UTF-8"?>
<jube>
  <benchmark name="titan_benchmark" outpath="bench_run">
    <comment>Multi-node benchmark for TITAN</comment>

    <!-- Configuration of compilers -->
    <parameterset name="compilationParameter">
      <parameter name="compiler" tag="!pmpi+!gnu">impi</parameter>
      <parameter name="compiler" tag="pmpi">pmpi</parameter>
      <parameter name="compiler" tag="gnu">gnu</parameter>
      <parameter name="flags" tag="pmpi">-DSUFFIX=pmpi</parameter>
      <parameter name="flags" tag="gnu">-DCOMPILER=gnu</parameter>

      <!-- parallel_type: "mpi" uses only mpi (intra and internode), "hybrid" uses full omp in each node, mpi for different nodes. -->
      <parameter name="parallel_type" tag="mpi">mpi</parameter>
      <parameter name="parallel_type" tag="hybrid">hybrid</parameter>
      <parameter name="machine" tag="jureca">jureca</parameter>
      <parameter name="machine" tag="booster">booster</parameter>
      <parameter name="machine" tag="juwels">juwels</parameter>
      <parameter name="machine" tag="jusuf">jusuf</parameter>
    </parameterset>

    <!-- Configuration of submission script -->
    <parameterset name="systemParameter" init_with="platform.xml">
      <parameter name="scaling_factor" type="int" mode="python">",".join(str(n**3) for n in range(1,3))</parameter>

      <parameter name="mail"></parameter>
      <!-- <parameter name="additional_job_config"  tag="jureca">#SBATCH &#45;&#45;reservation=system_maint.20200406_083747</parameter -->
      <!-- parameter name="additional_job_config"  tag="juwels">#SBATCH &#45;&#45;reservation=maint-restarttests</parameter -->

      <parameter name="nodes" type="int" mode="python" tag="sc">$scaling_factor</parameter>
      <parameter name="nodes" type="int" mode="python" tag="time_prop" update_mode="step">
      { "selfconsistency": "216",     
        "timepropagation": "$scaling_factor" }["$jube_step_name"]
      </parameter>

      <parameter name="maxjobspernode" tag="jureca">48</parameter>
      <parameter name="maxjobspernode" tag="booster">272</parameter>
      <parameter name="maxjobspernode" tag="juwels">96</parameter>
      <parameter name="maxjobspernode" tag="jusuf">256</parameter>

      <parameter name="queue" tag="jureca">batch</parameter>
      <parameter name="queue" tag="booster">booster</parameter>
      <parameter name="queue" tag="juwels">batch</parameter>
      <parameter name="queue" tag="jusuf">batch</parameter>

      <parameter name="taskspernode" type="int" mode="python">
      { "hybrid": "1", 
        "mpi": "${maxjobspernode}"}["${parallel_type}"]
      </parameter>
      <parameter name="threadspertask" type="int" mode="python">
      { "hybrid": "${maxjobspernode}",
        "mpi": "1"}["${parallel_type}"]
      </parameter>


      <parameter name="tasks" mode="python" type="int" update_mode="step">$nodes * $taskspernode</parameter>
      <parameter name="notification">ALL</parameter>
      <parameter name="timelimit">02:00:00</parameter>
      <parameter name="account" tag="jureca|juwels|booster">cstao</parameter>
      <parameter name="account" tag="jusuf">zam</parameter>
      <parameter name="env">${load_modules}; export OMP_NUM_THREADS=$SLURM_CPUS_PER_TASK</parameter>
      <parameter name="executable" mode="python">{"impi":"${folder}/bin/titan_${machine}.exe", "pmpi":"${folder}/bin/titan_${machine}_${compiler}.exe", "gnu":"${folder}/bin/titan_${machine}_${compiler}.exe"}["${compiler}"]</parameter>
      <parameter name="preprocess"></parameter>
    </parameterset>

    <!-- Configuration of program -->
    <parameterset name="programset" init_with="platform.xml:executeset">
      <parameter name="args_starter">--cpu-bind=rank</parameter>
      <parameter name="folder">$$HOME/shared/TITAN</parameter>
      <parameter name="inputsfolder">$$HOME/shared/TITAN/jube</parameter>
    </parameterset>

    <!-- Configuration of the environment -->
    <parameterset name="modules">
      <parameter name="load_modules" mode="python">{"jureca":{"impi":"module purge; ml Intel/2019.5.281-GCC-8.3.0 IntelMPI/2019.6.154 imkl/2019.5.281 NAG/Mark26 CMake",
                                                              "pmpi":"module purge; ml Intel/2019.5.281-GCC-8.3.0 ParaStationMPI/5.2.2-1 imkl/2019.5.281 NAG/Mark26 CMake",
                                                               "gnu":"module purge; ml GCC/8.3.0 OpenMPI/4.0.2 imkl/2019.5.281 CMake"}["${compiler}"],
                                                    "booster":{"impi":"module purge ; module load Architecture/KNL ; ml Intel/2019.5.281-GCC-8.3.0 IntelMPI/2019.6.154 imkl/2019.5.281 CMake ; export NAG_KUSARI_FILE=$$HOME/BoosterNAG/license.lic",
                                                               "pmpi":"module purge ; module load Architecture/KNL ; ml Intel/2019.5.281-GCC-8.3.0 ParaStationMPI/5.2.2-1 imkl/2019.5.281 CMake ; export NAG_KUSARI_FILE=$$HOME/BoosterNAG/license.lic",
                                                                "gnu":"module purge ; module load Architecture/KNL ; ml GCC/8.3.0 OpenMPI/4.0.2 imkl/2019.5.281 CMake ; export NAG_KUSARI_FILE=$$HOME/BoosterNAG/license.lic"}["${compiler}"],
                                                    "juwels":{"impi":"module purge; ml Intel/2019.5.281-GCC-8.3.0 IntelMPI/2019.6.154 imkl/2019.5.281 CMake",
                                                              "pmpi":"module purge; ml Intel/2019.5.281-GCC-8.3.0 ParaStationMPI/5.2.2-1 CMake",
                                                               "gnu":"module purge; ml GCC/8.3.0 OpenMPI/4.0.2 imkl/2019.5.281 CMake"}["${compiler}"],
                                                    "jusuf":{"impi":"module purge; ml Intel/2019.5.281-GCC-8.3.0 IntelMPI/2019.6.154 imkl/2019.5.281 CMake",
                                                             "pmpi":"module purge; ml Intel/2019.5.281-GCC-8.3.0 ParaStationMPI/5.2.2-1 CMake",
                                                              "gnu":"module purge; module use $OTHERSTAGES; ml Stages/Devel-2019a; ml GCC/8.3.0 OpenMPI/4.0.2 imkl/2019.5.281/2019.3.199 CMake"}["${compiler}"]
                                                    }["${machine}"]</parameter>
    </parameterset>

    <!-- Configuration of input parameters -->
    <parameterset name="inputParameter">
      <parameter name="type" type="int" mode="python" update_mode="step">{"selfconsistency": 1, 
                                                                          "timepropagation": 11 }["$jube_step_name"]</parameter>
      <parameter name="options">slatec createfolders positions ontheflysc eigenstates nojac</parameter>
      <parameter name="eta" type="float">1.e-3</parameter>
      <parameter name="kpoints" type="int" mode="python" update_mode="step">8000000*$scaling_factor</parameter>
      <parameter name="output_file">output/out_${type}_${eta}_${kpoints}</parameter>
      <parameter name="soc">T</parameter>
      <parameter name="supercond">F</parameter>
      <parameter name="skipsc">T</parameter>
    </parameterset>

    <!-- Configuration of element parameters -->
    <parameterset name="elementParameter">
      <parameter name="element">Ni</parameter>
      <parameter name="uint" type="float">0.09559</parameter>
      <parameter name="lambda" type="float">0.0</parameter> <!-- If one lambda is used -->
      <parameter name="lambda_s" type="float">0.0</parameter>
      <parameter name="lambda_p" type="float">0.0</parameter>
      <parameter name="lambda_d" type="float">0.0</parameter>
      <parameter name="same_lambda">$lambda $lambda $lambda</parameter>
    </parameterset>

    <!-- Files -->
    <fileset name="input_files">
      <copy>${inputsfolder}/input.in</copy>
      <copy>${inputsfolder}/${element}.in</copy>
      <copy>${inputsfolder}/basis</copy>
      <copy>${inputsfolder}/kbands</copy>
    </fileset>

    <!-- Files -->
    <fileset name="time_prop_files">
      <copy>${jube_wp_abspath}/selfconsistency/*</copy>
    </fileset>

    <!-- Substitute -->
    <substituteset name="inputSubstitutions">
      <!-- Substitute files -->
      <iofile in="input.in" out="input" />
      <!-- Substitute commands -->
      <sub source="#TYPE#" dest="$type" />
      <sub source="#OUTPUT_FILE#" dest="$output_file" />
      <sub source="#OPTIONS#" dest="$options" />
      <sub source="#SOC#" dest="$soc" />
      <sub source="#SUPERCOND#" dest="$supercond" />
      <sub source="#ETA#" dest="$eta" />
      <sub source="#KPOINTS#" dest="$kpoints" />
      <sub source="#SKIPSC#" dest="$skipsc" />
    </substituteset>

    <substituteset name="elementSubstitutions">
      <!-- Substitute files -->
      <iofile in="$element.in" out="$element" />
      <!-- Substitute commands -->
      <sub source="#UINT#" dest="$uint" />
      <sub source="#LAMBDA#" dest="$same_lambda" />
    </substituteset>

    <!-- Pattern for runtime -->
    <patternset name="runtimePattern">
      <pattern name="runtime" type="float" unit="s">Finished on:.*Elapsed time:\s*${jube_pat_fp}</pattern>
      <pattern name="mpi_processes" type="int">Running on ${jube_pat_int}</pattern>
      <pattern name="omp_threads" type="int">process\(es\) WITH ${jube_pat_int}</pattern>
    </patternset>

    <!-- Pattern for results -->
    <patternset name="resultsPattern">
      <pattern name="nkpt" type="int">nkpt = ${jube_pat_int}</pattern>
      <pattern name="delta_d" type="float">Dd\( 1\)= ${jube_pat_fp}</pattern>
      <pattern name="mag" type="float" unit="muB">M\( 1\)= ${jube_pat_fp}</pattern>
      <pattern name="orb" type="float" unit="muB">L\( 1\)= ${jube_pat_fp}</pattern>
      <pattern name="sc_iterations" type="int">\(\s*${jube_pat_int} iterations \)</pattern>
    </patternset>

    <!-- Pattern for time-propagation results -->
    <patternset name="timepropPattern">
      <pattern name="time" type="float" unit="ps" dotall="true">^.*(\d+\.\d+E[+-]\d+)\s+\d+\.\d+E[+-]\d+$</pattern>
      <pattern name="timeprop_iterations" type="int">${jube_pat_int} total iterations</pattern>
    </patternset>

    <!-- Pattern for job status -->
    <patternset name="job_pat">
      <pattern mode="pattern" name="job_id" type="int">Submitted batch job ${jube_pat_int}</pattern>
      <pattern name="status" mode="perl">'`sacct --format State -j $job_id | head -n 3 | tail -n 1`'</pattern>
      <pattern name="exit_code" mode="perl">'`sacct --format ExitCode -j $job_id | head -n 3 | tail -n 1`'</pattern>
    </patternset>


    <!-- Compilation -->
    <step name="compile" suffix="${compiler}">
      <use>compilationParameter</use>
      <use tag="compile">modules</use>
      <use tag="compile">programset</use>
      <do tag="compile">${load_modules}</do>
      <!-- patch for Jureca's GPUs -->
      <do tag="compile" work_dir="${folder}/build">rm -r *</do>
      <do tag="compile" work_dir="${folder}/build">cmake ../ -DPLATFORM=${machine} ${flags}</do>
      <do tag="compile" work_dir="${folder}/build">make -j24</do>
      <do tag="!compile">echo "'compile' tag was not used. Skipping compilation for ${compiler}..."</do>
    </step>


    <!-- Self-consistency operation -->
    <step name="selfconsistency" depend="compile" tag="sc,time_prop">
      <!-- Defining variables -->
      <use>compilationParameter</use>     <!-- use compilation parameterset -->
      <use>programset</use>               <!-- use program parameterset -->
      <use>modules</use>                  <!-- use modules parameterset -->
      <use>systemParameter</use>          <!-- use system parameterset -->
      <use>elementParameter</use>         <!-- use element parameterset -->
      <use>inputParameter</use>           <!-- use input parameterset -->
      <!-- Using files -->
      <use>input_files</use>                    <!-- use TITAN input fileset -->
      <use from="platform.xml">jobfiles</use>   <!-- use job files -->
      <!-- Making substitutions -->
      <use>inputSubstitutions</use>              <!-- use input substitutions -->
      <use>elementSubstitutions</use>            <!-- use element substitutions -->
      <use from="platform.xml">executesub</use>  <!-- use job substitutions -->
      <!-- Tasks -->
      <do>mkdir -p $(dirname $output_file)</do>  <!-- create output folder if necessary -->
      <do>$submit $submit_script</do>            <!-- Submitting job -->
      <do done_file="$done_file"></do>           <!-- Creating "done" file -->
    </step>

    <!-- Time Propagation Operation -->
    <step name="timepropagation" depend="selfconsistency"  tag="time_prop">
      <use>compilationParameter</use>     <!-- use compilation parameterset -->
      <use>programset</use>               <!-- use program parameterset -->
      <use>modules</use>                  <!-- use modules parameterset -->
      <use>systemParameter</use>          <!-- use system parameterset -->
      <use>elementParameter</use>         <!-- use element parameterset -->
      <use>inputParameter</use>           <!-- use input parameterset -->
      <!-- Using files -->
      <use>time_prop_files</use>
      <use>input_files</use>                    <!-- use TITAN input fileset -->
      <use from="platform.xml">jobfiles</use>   <!-- use job files -->
      <!-- Making substitutions -->
      <use>inputSubstitutions</use>              <!-- use input substitutions -->
      <use>elementSubstitutions</use>            <!-- use element substitutions -->
      <use from="platform.xml">executesub</use>  <!-- use job substitutions -->
      <do>$submit $submit_script</do>            <!-- Submitting job -->
      <do done_file="$done_file"></do>           <!-- Creating "done" file -->
    </step>

    <!-- Analyse -->
    <analyser name="analyse" reduce="false" tag="sc">
      <use>runtimePattern</use> <!-- use runtime patternset -->
      <use>resultsPattern</use> <!-- use results patternset -->
      <analyse step="selfconsistency">
        <file>$output_file</file>
        <file use="job_pat">stdout</file>
      </analyse>
    </analyser>

    <!-- Analyse -->
    <analyser name="analyse" reduce="false" tag="time_prop">
      <use>runtimePattern</use> <!-- use runtime patternset -->
      <use>resultsPattern</use> <!-- use results patternset -->
      <analyse step="timepropagation">
        <file>$output_file</file>
        <file use="job_pat">stdout</file>
      </analyse>
      <analyse step="timepropagation">
        <file use="timepropPattern">${jube_wp_abspath}/results/TSOC/1Sites/time_propagation/occupation_efieldpulse_nkpt=10648_eta=1.0E-03_ev.dat</file>
      </analyse>
    </analyser>

    <!-- Create result table -->
    <result>
      <use>analyse</use> <!-- use existing analyser -->
      <table name="result" style="pretty" tag="!csv">
        <column>nodes</column>
        <column>parallel_type</column>
        <column title="Processes">mpi_processes</column>
        <column title="Threads">omp_threads</column>
        <column title="SOC">soc</column>
        <column title="U[Ry]">uint</column>
        <column title="eta[Ry]">eta</column>
        <column title="lambda[Ry]">lambda</column>
        <column title="M[muB]" format=".3f">mag</column>
        <column title="L[muB]" format=".3f">orb</column>
        <column>delta_d</column>
        <column>nkpt</column>
        <column tag="time_prop" format=".3e">time_last</column>
        <column>runtime</column>
        <column title="SC iterations" tag="sc">sc_iterations</column>
        <column title="TP iterations" tag="time_prop">timeprop_iterations</column>
        <column>status</column>
      </table>

      <table name="result-csv" style="csv" tag="csv">
        <column>nodes</column>
        <column>parallel_type</column>
        <column title="Processes">mpi_processes</column>
        <column title="Threads">omp_threads</column>
        <column title="SOC">soc</column>
        <column title="U[Ry]">uint</column>
        <column title="eta[Ry]">eta</column>
        <column title="lambda[Ry]">lambda</column>
        <column title="M[muB]" format=".3f">mag</column>
        <column title="L[muB]" format=".3f">orb</column>
        <column>delta_d</column>
        <column>nkpt</column>
        <column tag="time_prop">time</column>
        <column>runtime</column>
        <column title="SC iterations" tag="sc">sc_iterations</column>
        <column title="TP iterations" tag="time_prop">timeprop_iterations</column>
        <column>status</column>
      </table>
    </result>

  </benchmark>
</jube>
